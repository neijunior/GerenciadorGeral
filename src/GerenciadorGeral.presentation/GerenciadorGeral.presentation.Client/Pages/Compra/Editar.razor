@page "/Compra/Editar/{id?}"

@using GerenciadorGeral.application.DTO
@inject IJSRuntime JSRuntime;
@inject NavigationManager navManager;
@inject GerenciadorGeral.application.Interfaces.ICompraApp compraApp;
@inject GerenciadorGeral.application.Interfaces.IFornecedorApp fornecedorApp;
@rendermode InteractiveAuto

<div class="container">
  <div class="row">
    <div class="col-md-10">
      <div class="card">
        <div class="card-header">Criar Compra</div>
        <div class="card-body">

          <EditForm Model="compra" OnValidSubmit="EditarCompra" FormName="frmCompra">

            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
              <label for="Fornecedor">Fornecedor</label>
              <InputSelect id="CompraPai" @bind-Value="compra.IdFornecedor" class="form-control selectpicker">
                <option value="" class="dropdown-item">Selecione</option>
                @foreach (var item in ListaFornecedor)
                {
                  <option value="@item.Id">@item.RazaoSocial</option>
                }
              </InputSelect>
            </div>

            <div class="form-group mb-3">
              <label class="form-label">Data</label>
              <InputDate @bind-Value="compra.Data" class="form-control"></InputDate>
              @* <ValidationMessage For="()=>CompraModel.Titulo"></ValidationMessage> *@
            </div>

            <div class="form-group mb-3">
              <label class="form-label">Desconto</label>
              <InputNumber @bind-Value="compra.Desconto" class="form-control"></InputNumber>
            </div>

            <div class="form-group mb-3">
              <label class="form-label">Valor Total</label>
              <InputNumber @bind-Value="compra.ValorTotal" class="form-control"></InputNumber>
            </div>

            <div class="form-group mb-3">
              <label class="form-label">Observação</label>
              <InputText @bind-Value="compra.Observacao" class="form-control"></InputText>
            </div>

            @if (compra.ListaItens != null && compra.ListaItens.Count() > 0)
            {
              <table class="table table-responsive table-striped">
                <thead>
                  <tr>
                    <th>SKU</th>
                    <th>Valor Unitário</th>
                    <th>Quantidade</th>
                    <th>Desconto</th>
                    <th>Valor Total</th>
                    <th>Ações</th>
                  </tr>
                </thead>
                <tbody>
                  @foreach (var item in compra.ListaItens)
                  {
                    <tr>
                      <td>@item.SKU.Nome</td>
                      <td>@item.ValorUnitario.ToString()</td>
                      <td>@item.Quantidade.ToString()</td>
                      <td>@item.Desconto.ToString()</td>
                      <td>@item.ValorTotal.ToString()</td>
                      <td>
                        <a class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalItem"  @onclick="async () => EditarItem(item)">Editar</a>
                        <button class="btn btn-danger" @onclick="async () => ExcluirItem(item.Id)">Excluir</button>
                      </td>
                    </tr>
                  }
                </tbody>
              </table>
            }
            <button type="submit" class="btn btn-success">Salvar</button>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalItem" @onclick="@(() => AdicionarItem())">
              Adicionar Item
            </button>
          </EditForm>
        </div>
      </div>
    </div>
  </div>
</div>


<!-- Modal -->
<div class="modal fade" id="modalItem" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <CompraItem @ref="mdl" item="@compraItem" FormAction="@Action" Refresh="@Refresh" />
    </div>
  </div>
</div>


@code {
  CompraItem mdl;
  public CompraDTO compra { get; set; } = new();
  public CompraItemDTO compraItem { get; set; } = new();
  public string Action { get; set; }
  public ICollection<FornecedorDTO> ListaFornecedor { get; set; }

  [Parameter] public string id { get; set; }

  protected override async Task OnInitializedAsync()
  {
    ListaFornecedor = await fornecedorApp.SelectAll();
    compra = !string.IsNullOrEmpty(id) ? await compraApp.Consultar(Guid.Parse(id)) : compra;
  }

  private async Task EditarCompra()
  {
    GerenciadorGeral.domain.Entidades.Compra compraBD = new()
      {
        Id = compra.Id,
        IdFornecedor = compra.IdFornecedor,
        Data = compra.Data,
        Desconto = 0,
        ValorTotal = 0,
        Observacao = compra.Observacao
      };

    if (string.IsNullOrEmpty(id))
    {
      compraBD.Id = Guid.NewGuid();
      await compraApp.Insert(compraBD);
    }
    else
      await compraApp.Update(compraBD);

    navManager.NavigateTo("/Compra/Index");
  }

  public void AdicionarItem()
  {
    compraItem = new();
    compraItem.IdCompra = compra.Id;
    Action = "A";
  }

  public void EditarItem(CompraItemDTO i)
  {
    compraItem = i;
    Action = "U";
  }

  public void Refresh()
  {
    switch (Action)
    {
      case "A":
        break;
      case "U":
        break;
      default:
        break;
    }
    
  }

  public async Task ExcluirItem(Guid Id)
  {
    bool confirma = await JSRuntime.InvokeAsync<bool>("confirm", "Deseja excluir o item?");
    if (!confirma)
      return;

    //var sku = await compraApp.SelectById(Id);

    // var sku = await compraApp.Consultar<GerenciadorGeral.domain.Entidades.Compra>(w => w.Id == Id, i => i.Fornecedor);

    // await compraApp.Delete(sku.Id);

    // listCompras = await PopularCompras();

    StateHasChanged();
  }
}