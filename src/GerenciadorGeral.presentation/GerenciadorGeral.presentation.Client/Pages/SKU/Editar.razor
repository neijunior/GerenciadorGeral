@page "/Sku/Editar/{id?}"

@using GerenciadorGeral.application.DTO
@using GerenciadorGeral.domain.Entidades
@using Formatacao;
@inject NavigationManager navManager;
@inject GerenciadorGeral.application.Interfaces.ISKUApp skuApp;
@inject GerenciadorGeral.application.Interfaces.IUnidadeMedidaApp unidadeMedidaApp;
@inject GerenciadorGeral.application.Interfaces.IMarcaApp marcaApp;
@inject GerenciadorGeral.application.Interfaces.IInsumoApp insumoApp;
@rendermode InteractiveServer

<div class="container">
  <div class="row">
    <div class="col-md-10">
      <div class="card">
        <div class="card-header">Criar SKU</div>
        <div class="card-body">

          <EditForm Model="skuModel" OnValidSubmit="EditarSku" FormName="Sku">

            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
              <label class="form-label">Código</label>
              <InputText @bind-Value="skuModel.Codigo" class="form-control" disable></InputText>
            </div>

            <div class="form-group mb-3">
              <label class="form-label">Nome</label>
              <InputText @bind-Value="skuModel.Nome" class="form-control"></InputText>
              <ValidationMessage For="()=>skuModel.Nome"></ValidationMessage>
            </div>

            <div class="form-group mb-3">
              <label for="skuUnidadeMedida">Unidade Medida</label>
              <InputSelect id="skuUnidadeMedida" @bind-Value="skuModel.CodigoUnidadeMedida">
                <option value="" class="dropdown-item">Selecione</option>
                @foreach (var item in ListaUnidadeMedida)
                {
                  <option value="@item.Codigo">@item.Descricao</option>
                }
              </InputSelect>
              <ValidationMessage For="()=>skuModel.CodigoUnidadeMedida"></ValidationMessage>
            </div>

            <div class="form-group mb-3">
              <label class="form-label">Quantidade</label>
              <InputNumber @bind-Value="skuModel.Quantidade" class="form-control"></InputNumber>
              <ValidationMessage For="()=>skuModel.Quantidade"></ValidationMessage>
            </div>

            <div class="form-group mb-3">
              <label for="skuIdMarca">Marca</label>
              <InputSelect id="skuIdMarca" @bind-Value="skuModel.IdMarca">
                <option value="" class="dropdown-item">Selecione</option>
                @foreach (var item in ListaMarcas)
                {
                  <option value="@item.Id">@item.Nome</option>
                }
              </InputSelect>
              <ValidationMessage For="()=>skuModel.IdMarca"></ValidationMessage>
            </div>

            <div class="form-group mb-3">
              <label for="skuIdMarca">Insumo</label>
              <InputSelect id="skuIdInsumo" @bind-Value="skuModel.IdInsumo">
                <option value="" class="dropdown-item">Selecione</option>
                @foreach (var item in ListaInsumos)
                {
                  <option value="@item.Id">@item.Nome</option>
                }
              </InputSelect>
              <ValidationMessage For="()=>skuModel.IdInsumo"></ValidationMessage>
            </div>

            <div class="form-group mb-3">
              <label class="form-label">Interno</label>
              <InputCheckbox @bind-Value="skuModel.Interno"></InputCheckbox>
            </div>

            <button type="submit" class="btn btn-success">Salvar</button>
          </EditForm>
        </div>
      </div>
    </div>
  </div>
</div>

@code {

  public SKUDTO skuModel { get; set; } = new();
  public ICollection<UnidadeMedidaDTO> ListaUnidadeMedida { get; set; } 
  public ICollection<Marca> ListaMarcas { get; set; }
  public ICollection<InsumoDTO> ListaInsumos { get; set; }

  [Parameter] public string id { get; set; }

  protected override async Task OnInitializedAsync()
  {
    ListaMarcas = await marcaApp.Listar();
    ListaInsumos = await insumoApp.Listar();
    ListaUnidadeMedida = await unidadeMedidaApp.SelectAll();
    skuModel = !string.IsNullOrEmpty(id) ? await skuApp.SelectById(Guid.Parse(id)) : skuModel;
  }

  private async Task EditarSku()
  {
    var marca = await marcaApp.Consultar(skuModel.IdMarca);
    string Codigo = $"{skuModel.Nome.Left(3)}-{(int)skuModel.Quantidade}{skuModel.CodigoUnidadeMedida}-{marca.Nome.Left(3)}";
    GerenciadorGeral.domain.Entidades.SKU skuBD = new()
      {
        Id = skuModel.Id,
        Codigo = Codigo.ToUpper(),
        Nome = skuModel.Nome,
        CodigoUnidadeMedida = skuModel.CodigoUnidadeMedida,
        Quantidade = skuModel.Quantidade,
        IdMarca = skuModel.IdMarca,
        Interno = skuModel.Interno,
        IdInsumo = skuModel.IdInsumo
      };

    if (string.IsNullOrEmpty(id))
    {
      skuBD.Id = Guid.NewGuid();
      await skuApp.Insert(skuBD);
    }
    else
      await skuApp.Update(skuBD);

    navManager.NavigateTo("/Sku/Index");
  }
}
